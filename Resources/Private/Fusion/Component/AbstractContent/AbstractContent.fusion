prototype(NeosRulez.Bootstrap:Component.AbstractContent) < prototype(Neos.Fusion:Component) {
    nodetype = ${String.replace(String.replace(String.toLowerCase(node.nodetype), '.', '-'), ':', '-')}
    inBackend = ${site.context.inBackend}
    isButton = ${this.nodetype == 'neosrulez-bootstrap-content-button' || this.nodetype == 'neosrulez-bootstrap-content-youtube' || this.nodetype == 'neosrulez-bootstrap-content-vimeo' ? true : false}

    containerType = ${q(node).parentsUntil('[instanceof Neos.Neos:Document]').count() == 1 ? (this.isContainerNodeType ? 'container-fluid px-0' : (node.properties.containerType ? node.properties.containerType : false)) : false}
    displayClass = ${q(node).property('display') ? ' d-' + q(node).property('display') : false}
    cssClass = ${node.properties.class ? node.properties.class : false}

    marginClass = ${(node.properties.mt ? ' ' + node.properties.mt : '') + (node.properties.mb ? ' ' + node.properties.mb : '') + (node.properties.ml ? ' ' + node.properties.ml : '') + (node.properties.mr ? ' ' + node.properties.mr : '')}
    paddingClass = ${(node.properties.pt ? ' ' + node.properties.pt : '') + (node.properties.pb ? ' ' + node.properties.pb : '') + (node.properties.pl ? ' ' + node.properties.pl : '') + (node.properties.pr ? ' ' + node.properties.pr : '')}
    marginNegativeClass = ${(node.properties.mtn ? ' ' + node.properties.mtn : '') + (node.properties.mbn ? ' ' + node.properties.mbn : '') + (node.properties.mln ? ' ' + node.properties.mln : '') + (node.properties.mrn ? ' ' + node.properties.mrn : '')}
    valignmentClass = ${node.properties.valignment ? ' ' + node.properties.valignment : ''}

    animation = ${node.properties.animation ? node.properties.animation : false}
    animationDelay = ${node.properties.animation && node.properties.delay ? node.properties.delay + 's' : (node.properties.animation ? '0s' : false)}

    link = ${node.properties.link}
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
    }
    linkTarget = ${node.properties.linktarget ? '_blank' : false}
    linkedClass = ${this.link ? (!this.isButton ? ' linked' : false) : false}

    parallax = ${node.properties.parallax ? true : false}
    parallaxClass = ${this.parallax && !this.inBackend ? 'parallax-window' : false}
    parallaxDataAttribute = ${this.parallax && !this.inBackend ? 'scroll' : false}
    parallaxImage = ${this.parallax && this.backgroundImageUri && !this.inBackend ? this.backgroundImageUri : false}
    parallaxImageWebp = ${this.parallax && this.backgroundImageUriWebp && !this.inBackend ? this.backgroundImageUriWebp : false}

    @context.visibilities = ${node.properties.visibility}
    visibilityClasses = Neos.Fusion:Loop {
        items = ${visibilities}
        itemName = 'visibility'
        iterationName = 'visibilityIterator'
        itemRenderer = afx`
            {visibilityIterator.isLast ? visibility : visibility + ' '}
        `
    }
    visibilityClasses.@if.render = ${visibilities}

    shadow = ${q(node).property('shadow')}
    shadowSize = ${q(node).property('shadow') && q(node).property('shadowSize')}
    shadowClass = ${this.shadowSize ? 'shadow' + (this.shadowSize ? (this.shadowSize == 'small' ? '-sm' : this.shadowSize == 'regular' ? '' : this.shadowSize == 'large' ? '-lg' : '') : '') : ''}

    class = ${'neosrulez-bootstrap-content' + (this.nodetype ? ' ' + this.nodetype : false) + (this.displayClass ? this.displayClass : (this.containerType ? ' ' + this.containerType : false)) + (this.marginClass ? this.marginClass : false) + (this.marginNegativeClass ? this.marginNegativeClass : false) + (this.paddingClass ? this.paddingClass : false) + (this.additionalClass ? ' ' + this.additionalClass : false) + (this.linkedClass ? this.linkedClass : false) + (this.valignmentClass ? this.valignmentClass : false) + (this.animation ? ' os-animation' : false) + (this.parallaxClass ? ' ' + this.parallaxClass : false) + (this.visibilityClasses ? ' ' + (this.inBackend ? ' hiding' : this.visibilityClasses) : false) + (this.isContainerNodeType ? (' ' + this.shadowClass) : '') + (this.cssClass ? ' ' + this.cssClass : false)}

    id = ${'node__' + node.identifier}

    renderContentClass = ${this.shadow ? (this.isContainerNodeType ? false : true) : false}

    @context.backgroundImage = ${this.backgroundImage}
    @context.parallax = ${this.parallax}
    parallaxValue = NeosRulez.Bootstrap:Component.Parallax {
        image = ${backgroundImage}
        width = NeosRulez.Bootstrap:Helper.ImageAutoWidth {
            block = true
        }
        allowCropping = false
        allowUpScaling = true
        async = true
    }
    parallaxValue.@if.condition = ${backgroundImage && parallax}

    renderer = afx`
        <div @if.render={!props.link && !props.isButton || props.link && props.inBackend && !props.isButton} id={props.id} data-node={node.identifier} class={props.class} data-os-animation={props.animation} data-os-animation-delay={props.animationDelay} data-parallax={props.parallaxDataAttribute} data-image-webp-src={props.parallaxImageWebp} data-image-src={props.parallaxImage} data-parallax-id={props.parallax ? node.identifier : false} data-parallax-value={props.parallaxValue ? Json.stringify(props.parallaxValue) : false} style={!props.parallaxImage ? props.styleAttribute : false} >
            <NeosRulez.Bootstrap:Component.Content content={props.content} renderContentClass={props.renderContentClass} shadowClass={props.shadowClass} />
        </div>
        <a @if.render={!props.inBackend && !props.isButton && props.link} id={props.id} data-node={node.identifier} class={props.class} href={props.link} target={props.linkTarget} data-os-animation={props.animation} data-os-animation-delay={props.animationDelay} data-parallax={props.parallaxDataAttribute} data-image-src={props.parallaxImage} data-image-webp-src={props.parallaxImageWebp} data-parallax-id={props.parallax ? node.identifier : false} data-parallax-value={props.parallaxValue ? Json.stringify(props.parallaxValue) : false} style={!props.parallaxImage ? props.styleAttribute : false} >
            <NeosRulez.Bootstrap:Component.Content content={props.content} renderContentClass={props.renderContentClass} shadowClass={props.shadowClass} />
        </a>
        <div @if.render={props.isButton} id={props.id} data-node={node.identifier} class={props.class} data-os-animation={props.animation} data-os-animation-delay={props.animationDelay} data-parallax={props.parallaxDataAttribute} data-image-src={props.parallaxImage} data-image-webp-src={props.parallaxImageWebp} data-parallax-id={props.parallax ? node.identifier : false} data-parallax-value={props.parallaxValue ? Json.stringify(props.parallaxValue) : false} style={!props.parallaxImage ? props.styleAttribute : false} >
            <NeosRulez.Bootstrap:Component.Content content={props.content} renderContentClass={props.renderContentClass} shadowClass={props.shadowClass} />
        </div>
    `
}

prototype(NeosRulez.Bootstrap:Component.Content) < prototype(Neos.Fusion:Component) {

    contentClass = ${this.shadowClass}

    renderer = afx`
        <div @if.render={props.renderContentClass} class={props.contentClass} >
            {props.content}
        </div>
        <Neos.Fusion:Fragment @if.render={!props.renderContentClass} >
            {props.content}
        </Neos.Fusion:Fragment>
    `
}
