prototype(Neos.NodeTypes:Image) < prototype(Neos.Neos:ContentComponent) {
    maximumWidth = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.maximumWidth'))}
    defaultWidth = null
    maximumHeight = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.maximumHeight'))}
    defaultHeight = null

    figureClassName = ${'d-flex w-100' + (node.properties.alignment == 'left' ? ' justify-content-start' : (node.properties.alignment == 'right' ? ' justify-content-end' : (node.properties.alignment == 'center' ? ' justify-content-center' : false)))}
    figcaptionClassName = ${'figure-caption' + (node.properties.alignment == 'left' ? ' text-start' : (node.properties.alignment == 'right' ? ' text-end' : (node.properties.alignment == 'center' ? ' text-center' : false)))}
    lightbox = ${node.properties.lightbox ? true : false}
    figureWrapperClassName = ${'figure-wrapper' + (this.lightbox ? ' lightbox' : false) + (this.block ? ' w-100' : false)}

    allowCropping = false
    allowUpScaling = true
    image = ${q(node).property('image') ? q(node).property('image') : false}

    disableLazyLoading = ${q(node).property('disableLazyLoading')}

    autoWidth = NeosRulez.Bootstrap:Helper.ImageAutoWidth {
        block = ${q(node).property('block')}
    }

    imageHeight = ${this.image.originalAsset.fileExtension != 'svg' ? (node.properties.imageHeight ? node.properties.imageHeight : false) : false}
    width = ${this.image.originalAsset.fileExtension != 'svg' ?  (node.properties.imageWidth ? node.properties.imageWidth : (this.imageHeight ? String.toInteger((String.toInteger(this.image.width * this.imageHeight)) / String.toInteger(this.image.height)) : this.autoWidth ? this.autoWidth : this.defaultWidth)) : false}
    height = ${this.image.originalAsset.fileExtension != 'svg' ?  (node.properties.imageWidth ? String.toInteger((String.toInteger(this.image.height * this.width)) / String.toInteger(this.image.width)) : (this.imageHeight ? this.imageHeight : (this.autoWidth ? String.toInteger((String.toInteger(this.image.height * this.autoWidth)) / String.toInteger(this.image.width)) : this.defaultHeight))) : false}

    dummyImage = Neos.Fusion:ResourceUri {
        path = 'resource://Neos.Neos/Public/Images/dummy-image.svg'
    }
    inBackend = ${site.context.inBackend}

    alternativeText = ${q(node).property('alternativeText')}
    link = ${q(node).property('link')}
    loading = ${this.disableLazyLoading ? 'eager' : 'lazy'}
    async = true
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
    }

    title = ${q(node).property('title') ? q(node).property('title') : q(node).property('image').title}
    hasCaption = ${q(node).property("hasCaption")}
    caption = ${String.trim(String.stripTags(q(node).property('caption'))) ? q(node).property('caption') : q(node).property('image').caption}
    caption.@process.convertUris = Neos.Neos:ConvertUris
    alignment = ${q(node).property('alignment')}

    linktarget = ${node.properties.linktarget ? '_blank' : false}

    galleryId = ${'lightbox__' + node.identifier}

    block = ${q(node).property('block')}

    renderer = afx`
        <NeosRulez.Bootstrap:Component.AbstractContent>
            <figure class={props.figureClassName} >
                <div @if.render={props.image} class={props.figureWrapperClassName} >
                    <NeosRulez.Bootstrap:Component.ImageTag @if.render={props.link} image={props.image} block={props.block} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} loading={props.loading} async={props.async} imageWidth={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageWidth} imageHeight={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageHeight} />
                    <NeosRulez.Bootstrap:Component.ImageTag @if.render={!props.link && !props.lightbox} image={props.image} block={props.block} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} loading={props.loading} async={props.async} imageWidth={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageWidth} imageHeight={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageHeight} />
                    <NeosRulez.Bootstrap:Component.ImageTag.Lightbox @if.render={props.lightbox} image={props.image} block={props.block} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} loading={props.loading} galleryId={props.galleryId} async={props.async} imageWidth={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageWidth} imageHeight={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageHeight} caption={props.hasCaption ? props.caption : false} />
                    <figcaption @if.render={props.hasCaption} class={props.figcaptionClassName} itemprop={props.caption} >
                        <Neos.Neos:Editable property="caption" />
                    </figcaption>
                </div>
                <div @if.render={!props.image && props.inBackend} class={props.figureWrapperClassName} >
                    <img src={props.dummyImage} title="Dummy image" alt="Dummy image" class="neos-handle" />
                </div>
            </figure>
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}

prototype(NeosRulez.Bootstrap:Content.Image) < prototype(Neos.NodeTypes:Image)

prototype(NeosRulez.Bootstrap:Component.ImageTag) < prototype(Neos.Fusion:Component) {

    @context.maximumWidth = ${this.maximumWidth ? this.maximumWidth : String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.maximumWidth'))}

    sourceSet = ${this.disableSourceSet ? (this.disableSourceSet ? false : true) : Configuration.setting('NeosRulez.Bootstrap.images.sourceSet')}

    @context.image = ${this.image}
    @context.imageMobile = ${this.imageMobile}
    @context.imageTablet = ${this.imageTablet}

    @context.allowCropping = ${this.allowCropping}
    @context.allowUpScaling = ${this.allowUpScaling}

    @context.width = ${this.width}
    @context.height = ${this.height}

    @context.loading = ${this.loading}

    @context.async = ${this.async ? this.async : false}

    @context.imageSizeStyleAttribute = ${this.imageWidth ? 'width:' + this.imageWidth + 'px !important; height:auto !important;' : (this.imageHeight ? 'width:auto !important; height:' + this.imageHeight + 'px !important;' : false)}

    block = true
    blockClass = ${this.block ? ' img-fluid w-100' : ''}
    imageClassName = ${node.properties.rounded ? 'figure-img' + this.blockClass + ' rounded' : 'figure-img' + this.blockClass + (this.class ? ' ' + this.class : '')}

    originalAssetTitle = ${this.image.originalAsset.title}
    originalAssetCopyrightnotice = ${this.image.originalAsset.copyrightnotice}
    imageTitle = ${this.title ? this.title : (this.originalAssetTitle ? this.originalAssetTitle : (this.originalAssetCopyrightnotice ? this.originalAssetCopyrightnotice : false))}

    alternativeImageSizes = ${node.properties.alternativeImageSizes}

    srcsetMobile = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${imageMobile ? imageMobile : (node.properties.imageMobile ? node.properties.imageMobile : image)}
        width = ${width ? width : (node.properties.imageMobile ? node.properties.imageMobile.width : image.width)}
        height = ${height ? height : (node.properties.imageMobile ? node.properties.imageMobile.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
//        maxWidth = 575
        maxWidth = 390
    }

    srcsetTablet = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${imageTablet ? imageTablet : (node.properties.imageTablet ? node.properties.imageTablet : image)}
        width = ${width ? width : (node.properties.imageTablet ? node.properties.imageTablet.width : image.width)}
        height = ${height ? height : (node.properties.imageTablet ? node.properties.imageTablet.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
//        maxWidth = 1200
        maxWidth = 920
    }

    srcsetDesktop = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${image ? image : (node.properties.image ? node.properties.image : image)}
        width = ${width ? width : (node.properties.image ? node.properties.image.width : image.width)}
        height = ${height ? height : (node.properties.image ? node.properties.image.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
        maxWidth = ${maximumWidth}
    }

    srcsetMobileWebp = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${imageMobile ? imageMobile : (node.properties.imageMobile ? node.properties.imageMobile : image)}
        width = ${width ? width : (node.properties.imageMobile ? node.properties.imageMobile.width : image.width)}
        height = ${height ? height : (node.properties.imageMobile ? node.properties.imageMobile.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
        webp = true
//        maxWidth = 575
        maxWidth = 390
    }

    srcsetTabletWebp = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${imageTablet ? imageTablet : (node.properties.imageTablet ? node.properties.imageTablet : image)}
        width = ${width ? width : (node.properties.imageTablet ? node.properties.imageTablet.width : image.width)}
        height = ${height ? height : (node.properties.imageTablet ? node.properties.imageTablet.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
        webp = true
//        maxWidth = 1200
        maxWidth = 920
    }

    srcsetDesktopWebp = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${image ? image : (node.properties.image ? node.properties.image : image)}
        width = ${width ? width : (node.properties.image ? node.properties.image.width : image.width)}
        height = ${height ? height : (node.properties.image ? node.properties.image.height : image.height)}
        allowCropping = ${allowCropping ? allowCropping : false}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        async = ${async}
        webp = true
        maxWidth = ${maximumWidth}
    }

    widthAttribute = ${(this.width || node.properties.image.width) && String.toInteger((this.width || node.properties.image.width)) > String.toInteger(maximumWidth) ? String.toInteger(maximumWidth) : String.toInteger((this.width || node.properties.image.width))}
    heightAttribute = ${(this.height || node.properties.image.height) && (this.width || node.properties.image.width) && String.toInteger((this.width || node.properties.image.width)) > String.toInteger(maximumWidth) ? String.toInteger((String.toInteger((this.height || node.properties.image.height)) * String.toInteger(this.widthAttribute) / String.toInteger((this.width || node.properties.image.width)))) : String.toInteger((this.height || node.properties.image.height))}

    renderer = afx`
        <picture @if.render={props.sourceSet}>
            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type="image/webp" srcset={props.srcsetDesktopWebp} media="(min-width: 1200px)" sizes={'(min-width: 1200px) ' + props.widthAttribute + 'px, 100vw'} />
            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type="image/webp" srcset={props.srcsetTabletWebp} media="(min-width: 576px)" sizes={'(min-width: 576px) ' + props.widthAttribute + 'px, 100vw'} />
            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type="image/webp" srcset={props.srcsetMobileWebp} media="(max-width: 575px)" sizes={'(max-width: 575px) ' + props.widthAttribute + 'px, 100vw'} />

            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type={props.image.originalAsset.mediaType} srcset={props.srcsetDesktop} media="(min-width: 1200px)" sizes={'(min-width: 1200px) ' + props.widthAttribute + 'px, 100vw'} />
            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type={props.image.originalAsset.mediaType} srcset={props.srcsetTablet} media="(min-width: 576px)" sizes={'(min-width: 576px) ' + props.widthAttribute + 'px, 100vw'} />
            <source @if.render={props.image.originalAsset.fileExtension != 'svg' ? true : false} type={props.image.originalAsset.mediaType} srcset={props.srcsetMobile} media="(max-width: 575px)" sizes={'(max-width: 575px) ' + props.widthAttribute + 'px, 100vw'} />

            <Neos.Neos:ImageTag attributes.class={props.imageClassName} asset={props.image} attributes.alt={props.alternativeText} attributes.title={props.imageTitle} width={props.width} maximumWidth={maximumWidth} height={props.height} maximumHeight={maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={loading} attributes.async={async} attributes.width={props.widthAttribute} attributes.height={props.heightAttribute} attributes.style={imageSizeStyleAttribute} />

            <code @if.render={props.image.originalAsset.fileExtension == 'svg' && props.alternativeImageSizes && site.context.inBackend ? true : false} class="d-block my-3" >
                {I18n.translate('NeosRulez.Bootstrap:NodeTypes.Content.Image:content.noAlternateImageSizesSupportForSvg')}
            </code>
        </picture>
        <Neos.Neos:ImageTag @if.render={!props.sourceSet} attributes.class={props.imageClassName} asset={props.image} attributes.alt={props.alternativeText} attributes.title={props.imageTitle} width={props.width} maximumWidth={maximumWidth} height={props.height} maximumHeight={maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={loading} attributes.async={async} attributes.width={props.widthAttribute} attributes.height={props.heightAttribute} attributes.style={imageSizeStyleAttribute} />
    `
}

prototype(NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet) < prototype(Neos.Fusion:Value) {
    @context.image = ${this.image}
    mediatype = ${this.image.originalAsset.mediatype}

    @context.allowCropping = ${this.allowCropping}
    @context.allowUpScaling = ${this.allowUpScaling}

    @context.width = ${this.width && String.toInteger(this.width) > String.toInteger(this.maxWidth) ? String.toInteger(this.maxWidth) : String.toInteger(this.width)}
    @context.height = ${this.height && this.width && String.toInteger(this.width) > String.toInteger(this.maxWidth) ? String.toInteger((String.toInteger(this.height) * String.toInteger(width) / String.toInteger(this.width))) : String.toInteger(this.height)}

    @context.async = ${this.async}

    @context.webp = ${this.webp}

    webpImageUri = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width : image.width}
        height = ${height ? height : image.height}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        format = 'webp'
        async = ${async}
        quality = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.quality'))}
        @if.condition = ${webp}
    }
    imageUri = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width : image.width}
        height = ${height ? height : image.height}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        async = ${async}
    }
    webpImageUri2x = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width * 2 : image.width * 2}
        height = ${height ? height * 2 : image.height * 2}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        format = 'webp'
        async = ${async}
        quality = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.quality'))}
        @if.condition = ${webp}
    }
    imageUri2x = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width * 2 : image.width * 2}
        height = ${height ? height * 2 : image.height * 2}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        async = ${async}
        quality = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.quality'))}
    }
    webpImageUri4x = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width * 4 : image.width * 4}
        height = ${height ? height * 4 : image.height * 4}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        format = 'webp'
        async = ${async}
        quality = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.quality'))}
        @if.condition = ${webp}
    }
    imageUri4x = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${width ? width * 4 : image.width * 4}
        height = ${height ? height * 4 : image.height * 4}
        allowUpScaling = ${allowUpScaling ? allowUpScaling : false}
        allowCropping = ${allowCropping ? allowCropping : false}
        async = ${async}
        quality = ${String.toInteger(Configuration.setting('NeosRulez.Bootstrap.images.quality'))}
    }
    value = ${image && !webp ? this.imageUri + ' 1x, ' + this.imageUri2x + ' 2x,' + this.imageUri4x + ' 4x' : (image && webp ? this.webpImageUri + ' 1x, ' + this.webpImageUri2x + ' 2x,' + this.webpImageUri4x + ' 4x' : false)}
}

prototype(NeosRulez.Bootstrap:Component.ImageTag.Lightbox) < prototype(Neos.Fusion:Component) {
    @context.image = ${this.image}
    lightboxImage = Neos.Neos:ImageUri {
        asset = ${image.originalAsset ? image.originalAsset : image}
        width = 1200
        maximumHeight = 1200
        allowCropping = false
        allowUpScaling = true
        async = true
    }
    inBackend = ${site.context.inBackend}
    tagName = ${this.inBackend ? 'div' : 'a'}

    block = true
    caption = false

    disableSourceSet = false

    renderer = afx`
        <Neos.Fusion:Tag tagName={props.tagName} attributes.href={props.inBackend ? false : props.lightboxImage} attributes.class="d-block" attributes.data-fslightbox={props.galleryId} attributes.data-caption={props.caption} >
            <NeosRulez.Bootstrap:Component.ImageTag @if.render={!props.link && !props.lightbox} disableSourceSet={props.disableSourceSet} image={props.image} block={props.block} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} loading={props.loading} async={props.async} imageWidth={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageWidth} imageHeight={this.image.originalAsset.fileExtension != 'svg' ? false : node.properties.imageHeight} />
        </Neos.Fusion:Tag>
    `
}

prototype(NeosRulez.Bootstrap:Helper.ImageAutoWidth) < prototype(Neos.Fusion:Value) {
    isTwoColumn = ${q(node).parentsUntil('[instanceof Neos.NodeTypes.ColumnLayouts:TwoColumn]').count() == 1 ? true : false}
    isThreeColumn = ${q(node).parentsUntil('[instanceof Neos.NodeTypes.ColumnLayouts:ThreeColumn]').count() == 1 ? true : false}
    isFourColumn = ${q(node).parentsUntil('[instanceof Neos.NodeTypes.ColumnLayouts:FourColumn]').count() == 1 ? true : false}
    width = ${this.block ? this.isTwoColumn ? 660 : (this.isThreeColumn ? 440 : (this.isFourColumn ? 330 : false)) : false}
    value = ${this.width}
}
