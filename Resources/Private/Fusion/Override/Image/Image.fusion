prototype(Neos.NodeTypes:Image) < prototype(Neos.Neos:ContentComponent) {
    maximumWidth = 2560
    width = null
    maximumHeight = 2560
    height = null

    figureClassName = ${'d-flex' + (node.properties.alignment == 'left' ? ' justify-content-start' : (node.properties.alignment == 'right' ? ' justify-content-end' : (node.properties.alignment == 'center' ? ' justify-content-center' : false)))}
    figcaptionClassName = ${'figure-caption' + (node.properties.alignment == 'left' ? ' text-start' : (node.properties.alignment == 'right' ? ' text-end' : (node.properties.alignment == 'center' ? ' text-center' : false)))}
    lightbox = ${node.properties.lightbox ? true : false}
    block = ${node.properties.block ? ' w-100' : false}
    figureWrapperClassName = ${'figure-wrapper' + (this.lightbox ? ' lightbox' : false) + (this.block ? ' w-100' : false)}

    allowCropping = false
    allowUpScaling = false
    image = ${q(node).property("image") ? q(node).property("image") : false}
    originalAsset = ${this.image.originalAsset}

    dummyImage = Neos.Fusion:ResourceUri {
        path = 'resource://Neos.Neos/Public/Images/dummy-image.svg'
    }
    inBackend = ${site.context.inBackend}

    alternativeText = ${q(node).property("alternativeText")}
    link = ${q(node).property("link")}
    loading = 'lazy'
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
    }

    title = ${q(node).property('title') ? q(node).property('title') : q(node).property('image').title}
    hasCaption = ${q(node).property("hasCaption")}
    caption = ${String.trim(String.stripTags(q(node).property('caption'))) ? q(node).property('caption') : q(node).property('image').caption}
    caption.@process.convertUris = Neos.Neos:ConvertUris
    alignment = ${q(node).property("alignment")}

    linktarget = ${node.properties.linktarget ? '_blank' : false}

    galleryId = ${'lightbox__' + node.identifier}

    renderer = afx`
        <NeosRulez.Bootstrap:Component.AbstractContent>
            <figure class={props.figureClassName} >
                <div @if.render={props.image} class={props.figureWrapperClassName} >
                    <a @if.render={props.link} href={props.link} target={props.linktarget}>
                        <NeosRulez.Bootstrap:Component.ImageTag image={props.image} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={props.loading} />
                    </a>
                    <NeosRulez.Bootstrap:Component.ImageTag @if.render={!props.link && !props.lightbox} image={props.image} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={props.loading} />
                    <NeosRulez.Bootstrap:Component.ImageTag.Lightbox @if.render={props.lightbox} image={props.image} asset={props.originalAsset} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={props.loading} galleryId={props.galleryId} />
                    <figcaption @if.render={props.hasCaption} class={props.figcaptionClassName} itemprop={props.caption} >
                        <Neos.Neos:Editable property="caption" />
                    </figcaption>
                </div>
                <div @if.render={!props.image && props.inBackend} class={props.figureWrapperClassName} >
                    <img src={props.dummyImage} title="Dummy image" alt="Dummy image" class="neos-handle" />
                </div>
            </figure>
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}

prototype(NeosRulez.Bootstrap:Content.Image) < prototype(Neos.NodeTypes:Image)

prototype(NeosRulez.Bootstrap:Component.ImageTag) < prototype(Neos.Fusion:Component) {
    block = ${node.properties.block ? ' w-100' : false}
    imageClassName = ${node.properties.rounded ? 'figure-img img-fluid' + this.block + ' rounded' : 'figure-img img-fluid' + this.block}

    originalAssetTitle = ${this.image.originalAsset.title}
    originalAssetCopyrightnotice = ${this.image.originalAsset.copyrightnotice}
    imageTitle = ${this.title ? this.title : (this.originalAssetTitle ? this.originalAssetTitle : (this.originalAssetCopyrightnotice ? this.originalAssetCopyrightnotice : false))}

    alternativeImageSizes = ${node.properties.alternativeImageSizes}

    srcsetMobile = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${node.properties.imageMobile}
    }
    srcsetTablet = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${node.properties.imageTablet}
    }
    srcsetDesktop = NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet {
        image = ${node.properties.image}
    }

    renderer = afx`
        <picture @if.render={props.alternativeImageSizes} >
            <source @if.render={props.srcsetDesktop} srcset={props.srcsetDesktop} media="(min-width: 1200px)" sizes="(min-width: 300px) 300px, 100vw" />
            <source @if.render={props.srcsetTablet} srcset={props.srcsetTablet} media="(min-width: 576px)" sizes="(min-width: 300px) 300px, 100vw" />
            <source @if.render={props.srcsetMobile} srcset={props.srcsetMobile} media="(max-width: 575px)" sizes="(min-width: 300px) 300px, 100vw" />
            <Neos.Neos:ImageTag attributes.class={props.imageClassName} asset={props.image} alt={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.srcset={props.srcsetDesktop} attributes.loading={props.loading} />
        </picture>
        <Neos.Neos:ImageTag @if.render={!props.alternativeImageSizes} attributes.class={props.imageClassName} asset={props.image} attributes.alt={props.alternativeText} attributes.title={props.imageTitle} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.srcset={props.srcsetDesktop} attributes.loading={props.loading} />
    `
}

prototype(NeosRulez.Bootstrap:Component.AlternativeImageSizes.SourceSet) < prototype(Neos.Fusion:Value) {
    @context.image = ${this.image}
    mediatype = ${this.image.originalAsset.mediatype}
    webpImageUri = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${image.width}
        height = ${image.height}
        allowUpScaling = true
        allowCropping = true
        format = 'webp'
    }
    imageUri = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${image.width}
        height = ${image.height}
        allowUpScaling = true
        allowCropping = true
    }
    webpImageUri2x = Neos.Neos:ImageUri {
        asset = ${image}
        width = ${image.width * 2}
        height = ${image.height * 2}
        allowUpScaling = true
        allowCropping = true
        format = 'webp'
    }
    imageUri2x = Neos.Neos:ImageUri {
        asset = ${image.originalAsset}
        width = ${image.width * 2}
        height = ${image.height * 2}
        allowUpScaling = true
        allowCropping = true
    }
    value = ${this.webpImageUri + ' 1x, ' + this.imageUri + ' 1x, ' + this.webpImageUri2x + ' 2x, ' + this.imageUri2x + ' 2x'}
}

prototype(NeosRulez.Bootstrap:Component.ImageTag.Lightbox) < prototype(Neos.Fusion:Component) {
    @context.image = ${this.image}
    @context.asset = ${this.asset}
    lightboxImage = Neos.Neos:ImageUri {
        asset = ${asset}
        width = 1200
        maximumHeight = 1200
        allowCropping = false
        allowUpScaling = true
    }
    inBackend = ${site.context.inBackend}
    tagName = ${this.inBackend ? 'div' : 'a'}

    renderer = afx`
        <Neos.Fusion:Tag tagName={props.tagName} attributes.href={props.inBackend ? false : props.lightboxImage} attributes.class="d-block" attributes.data-fslightbox={props.galleryId} >
            <NeosRulez.Bootstrap:Component.ImageTag @if.render={!props.link && !props.lightbox} image={props.image} alternativeText={props.alternativeText} title={props.title} width={props.width} maximumWidth={props.maximumWidth} height={props.height} maximumHeight={props.maximumHeight} allowUpScaling={props.allowUpScaling} allowCropping={props.allowCropping} attributes.loading={props.loading} />
        </Neos.Fusion:Tag>
    `
}
