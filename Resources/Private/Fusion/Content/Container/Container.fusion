prototype(NeosRulez.Bootstrap:Content.Container) < prototype(Neos.Neos:ContentComponent) {
    nodes = Neos.Neos:ContentCollection {
        @context.node = ${node}
    }

    async = true
    @context.async = ${this.async}

    backgroundImageUri = Neos.Neos:ImageUri {
        asset = ${q(node).property('backgroundImage')}
        width = 2000
        height = 800
        allowCropping = false
        allowUpScaling = true
        async = ${async}
    }
    backgroundImageUri.@if.cond = ${q(node).property('backgroundImage') ? true : false}

    backgroundImageUriWebp = Neos.Neos:ImageUri {
        asset = ${q(node).property('backgroundImage')}
        width = 2000
        height = 800
        allowCropping = false
        allowUpScaling = true
        format = 'webp'
        async = ${async}
    }
    backgroundImageUriWebp.@if.cond = ${q(node).property('backgroundImage') ? true : false}

    transparency = ${node.properties.transparency}
    backgroundPosition = ${node.properties.backgroundPosition}
    backgroundSize = ${node.properties.backgroundSize}

    bgColorPicker = ${node.properties.bgColorPicker ? node.properties.bgColorPicker : false}

    hasHtml5Video = ${node.properties.video}
    styleAttribute = ${(this.hasHtml5Video ? 'overflow:hidden;' : '')}

    bgColor = ${node.properties.bgColor ? 'bg-' + node.properties.bgColor : false}
    textColor = ${node.properties.textColor ? 'text-' + node.properties.textColor : false}
    videourl = ${node.properties.videourl}

    additionalClass = ${this.textColor + ' ' + this.bgColor + (this.videourl ? ' overflow-hidden' : false)}

    containerType = ${node.properties.containerType + (this.transparency ? ' bg-transparent__content-overlay' : false)}

    renderer = afx`
        <NeosRulez.Bootstrap:Component.Container.BackgroundUrl @if.render={props.backgroundImageUri} transparency={props.transparency} backgroundImageUri={props.backgroundImageUri} backgroundImageUriWebp={props.backgroundImageUriWebp} backgroundSize={props.backgroundSize} backgroundPosition={props.backgroundPosition} bgColorPicker={props.bgColorPicker} />
        <NeosRulez.Bootstrap:Component.AbstractContent isContainerNodeType={true} styleAttribute={props.styleAttribute} backgroundImageUri={props.backgroundImageUri} additionalClass={props.additionalClass} >
            <div class={props.containerType} >
                {props.nodes}
            </div>
            <NeosRulez.Bootstrap:Component.Container.VideoBackground />
            <NeosRulez.Bootstrap:Component.Container.Html5VideoBackground />
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}

prototype(NeosRulez.Bootstrap:Component.Container.BackgroundUrl) < prototype(Neos.Fusion:Component) {

    id = ${node.identifier}
    inBackend = ${site.context.inBackend}

    parallax = ${q(node).property('parallax')}
    transparency = false
    opacity = ${this.transparency ? (String.toInteger(this.transparency) / 100) : false}
    backgroundImageUri = false
    backgroundImageUriWebp = false
    backgroundSize = false
    backgroundPosition = false
    bgColorPicker = false

    renderer = afx`
        <style @if.render={props.inBackend ? true : (props.parallax ? false : true)}>{"
            @supports (background-image: url('" + props.backgroundImageUriWebp + "')) {
                #node__" + props.id + (props.transparency ? ':after' : '') + " {
                    " + (props.transparency ? ('position:absolute;left:0;top:0;width:100%;height:100%;content:"";z-index:1;opacity:' + props.opacity + ';') : '') + "
                    background: url(" + props.backgroundImageUriWebp + ");
                    -webkit-background-size: " + props.backgroundSize+ ";
                    -moz-background-size: " + props.backgroundSize+ ";
                    -o-background-size: " + props.backgroundSize+ ";
                    background-size: " + props.backgroundSize+ ";
                    background-position: " + props.backgroundPosition +";
                    " + (!props.props.transparency && props.bgColorPicker ? ('background-color: ' + props.bgColorPicker + ';') : '') + "
                }
                " + (props.transparency ? ('#node__' + props.id + '{ background-color: ' + props.bgColorPicker + '; }') : '') + "
            }
            @supports not (background-image: url('" + props.backgroundImageUriWebp + "')) {
                #node__" + props.id + (props.transparency ? ':after' : '') + " {
                    " + (props.transparency ? ('position:absolute;left:0;top:0;width:100%;height:100%;content:"";z-index:1;opacity:' + props.opacity + ';') : '') + "
                    background: url(" + props.backgroundImageUri + ");
                    -webkit-background-size: " + props.backgroundSize+ ";
                    -moz-background-size: " + props.backgroundSize+ ";
                    -o-background-size: " + props.backgroundSize+ ";
                    background-size: " + props.backgroundSize+ ";
                    background-position: " + props.backgroundPosition +";
                    " + (!props.props.transparency && props.bgColorPicker ? ('background-color: ' + props.bgColorPicker + ';') : '') + "
                }
                " + (props.transparency ? ('#node__' + props.id + '{ background-color: ' + props.bgColorPicker + '; }') : '') + "
            }
        "}</style>
        <style @if.render={!props.inBackend && props.parallax && props.bgColorPicker}>{"
            div[mirror-parallax-id=\"" + props.id + "\"] {
                background: " + props.bgColorPicker + ";
            }
        "}</style>
        <style @if.render={!props.inBackend && props.parallax && props.opacity}>{"
            div[mirror-parallax-id=\"" + props.id + "\"] img {
                opacity: " + props.opacity + " !important;
            }
        "}</style>
    `
}

prototype(NeosRulez.Bootstrap:Component.Container.VideoBackground) < prototype(Neos.Fusion:Component) {

    video = NeosRulez.Bootstrap:Class.VideoBackground {
        videourl = ${node.properties.videourl}
    }

    platformClass = ${this.video.platform == 'vimeo' ? 'ratio ratio-4x3' : 'ratio ratio-16x9'}
    videourl = ${this.video.videourl}

    renderer = afx`
        <div @if.render={props.video} class="video-background">
            <div class="video-foreground">
                <div class={props.platformClass} >
                    <iframe src={props.videourl} frameborder="0" allowfullscreen></iframe>
                </div>
            </div>
        </div>
    `
    renderer.@if.condition = ${node.properties.videourl}
}

prototype(NeosRulez.Bootstrap:Component.Container.Html5VideoBackground) < prototype(Neos.Fusion:Component) {

    platformClass = ${this.video.platform == 'vimeo' ? 'ratio ratio-4x3' : 'ratio ratio-16x9'}

    video = ${node.properties.video}

    renderer = afx`
        <div @if.render={props.video} class="video-background">
            <div class="video-foreground">
                <div class="ratio ratio-16x9" >
                    <Neos.Fusion:Tag @if.render={props.video} tagName="video" attributes.width="100%" attributes.autoplay={true} attributes.loop={true} attributes.playsinline={true} attributes.muted={true} >
                        <Neos.Fusion:Tag tagName="source" @children="attributes.src" attributes.type="video/mp4">
                            <Neos.Fusion:ResourceUri resource={props.video.resource} />
                        </Neos.Fusion:Tag>
                        Your browser does not support the video tag.
                    </Neos.Fusion:Tag>
                </div>
            </div>
        </div>
    `
}
