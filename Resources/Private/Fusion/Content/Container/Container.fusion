prototype(NeosRulez.Bootstrap:Content.Container) < prototype(Neos.Neos:ContentComponent) {
    nodes = Neos.Neos:ContentCollection {
        @context.node = ${node}
    }

    async = true
    @context.async = ${this.async}

    backgroundImageUri = Neos.Neos:ImageUri {
        asset = ${node.properties.backgroundImage}
        width = 2000
        height = 800
        allowCropping = false
        allowUpScaling = true
        async = ${async}
    }

    backgroundImageUriWebp = Neos.Neos:ImageUri {
        asset = ${node.properties.backgroundImage}
        width = 2000
        height = 800
        allowCropping = false
        allowUpScaling = true
        format = 'webp'
        async = ${async}
    }

    transparency = ${node.properties.transparency}
    backgroundPosition = ${node.properties.backgroundPosition}
    backgroundSize = ${node.properties.backgroundSize}

    bgColorPicker = ${node.properties.bgColorPicker ? node.properties.bgColorPicker : false}

    hasHtml5Video = ${node.properties.video}
    styleAttribute = ${this.backgroundImageUri ? (!this.transparency ? 'background: url(' + this.backgroundImageUri + ') no-repeat ' + this.backgroundPosition + ', url(' + this.backgroundImageUriWebp + ') no-repeat ' + this.backgroundPosition + '; ' : '') + (this.bgColorPicker ? ' background-color: ' + this.bgColorPicker + '; ' : '' ) + (!this.transparency ? '-webkit-background-size: ' + this.backgroundSize +'; -moz-background-size: ' + this.backgroundSize +'; -o-background-size: ' + this.backgroundSize +'; background-size: ' + this.backgroundSize + ';' : '') : (!this.transparency ? (this.bgColorPicker ? ' background-color: ' + this.bgColorPicker + '; ' : '' ) : '') + (this.hasHtml5Video ? 'overflow:hidden;' : '')}

    bgColor = ${node.properties.bgColor ? 'bg-' + node.properties.bgColor : false}
    textColor = ${node.properties.textColor ? 'text-' + node.properties.textColor : false}
    videourl = ${node.properties.videourl}

    additionalClass = ${this.textColor + ' ' + this.bgColor + (this.videourl ? ' overflow-hidden' : false)}

    containerType = ${node.properties.containerType + (this.transparency ? ' bg-transparent__content-overlay' : false)}

    renderer = afx`
        <NeosRulez.Bootstrap:Component.AbstractContent isContainerNodeType={true} styleAttribute={props.styleAttribute} backgroundImageUri={props.backgroundImageUri} additionalClass={props.additionalClass} >
            <div class={props.containerType} >
                {props.nodes}
            </div>
            <NeosRulez.Bootstrap:Component.Container.Transparency @if.render={props.transparency} transparency={props.transparency} backgroundImageUri={props.backgroundImageUri} backgroundImageUriWebp={props.backgroundImageUriWebp} backgroundPosition={props.backgroundPosition} backgroundSize={props.backgroundSize} bgColorPicker={props.bgColorPicker} />
            <NeosRulez.Bootstrap:Component.Container.VideoBackground />
            <NeosRulez.Bootstrap:Component.Container.Html5VideoBackground />
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}

prototype(NeosRulez.Bootstrap:Component.Container.Transparency) < prototype(Neos.Fusion:Component) {
    opacity = ${(String.toInteger(this.transparency) / 100)}
    styleAttribute = ${this.backgroundImageUri ? 'background: url(' + this.backgroundImageUri + '), url(' + this.backgroundImageUriWebp + ') no-repeat ' + this.backgroundPosition + '; ' + (this.bgColorPicker ? ' background-color: ' + this.bgColorPicker + '; ' : false ) + '-webkit-background-size: ' + this.backgroundSize + '; -moz-background-size: ' + this.backgroundSize +'; -o-background-size: ' + this.backgroundSize +'; background-size: ' + this.backgroundSize + ';' + (this.opacity ? ' opacity: ' + this.opacity + ';' : '') : (this.bgColorPicker ? ' background-color: ' + this.bgColorPicker + '; ' : false ) + (this.opacity ? ' opacity: ' + this.opacity + ';' : false)}
    inlineCss = ${'<style> #node__' + node.identifier + ':after{content:"";position:absolute;left:0;top:0;width:100%;height:100%;z-index:1;' + this.styleAttribute + '}</style>'}

    renderer = afx`
        {props.inlineCss}
    `
}

prototype(NeosRulez.Bootstrap:Component.Container.VideoBackground) < prototype(Neos.Fusion:Component) {

    video = NeosRulez.Bootstrap:Class.VideoBackground {
        videourl = ${node.properties.videourl}
    }

    platformClass = ${this.video.platform == 'vimeo' ? 'ratio ratio-4x3' : 'ratio ratio-16x9'}
    videourl = ${this.video.videourl}

    renderer = afx`
        <div @if.render={props.video} class="video-background">
            <div class="video-foreground">
                <div class={props.platformClass} >
                    <iframe src={props.videourl} frameborder="0" allowfullscreen></iframe>
                </div>
            </div>
        </div>
    `
    renderer.@if.condition = ${node.properties.videourl}
}

prototype(NeosRulez.Bootstrap:Component.Container.Html5VideoBackground) < prototype(Neos.Fusion:Component) {

    platformClass = ${this.video.platform == 'vimeo' ? 'ratio ratio-4x3' : 'ratio ratio-16x9'}

    video = ${node.properties.video}

    renderer = afx`
        <div @if.render={props.video} class="video-background">
            <div class="video-foreground">
                <div class="ratio ratio-16x9" >
                    <Neos.Fusion:Tag @if.render={props.video} tagName="video" attributes.width="100%" attributes.autoplay="true" attributes.loop="true" attributes.muted="true" attributes.controls="false" >
                        <Neos.Fusion:Tag tagName="source" @children="attributes.src" attributes.type="video/mp4">
                            <Neos.Fusion:ResourceUri resource={props.video.resource} />
                        </Neos.Fusion:Tag>
                        Your browser does not support the video tag.
                    </Neos.Fusion:Tag>
                </div>
            </div>
        </div>
    `
}
