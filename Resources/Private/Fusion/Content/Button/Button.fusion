prototype(NeosRulez.Bootstrap:Content.Button) < prototype(Neos.Neos:ContentComponent) {
    inBackend = ${site.context.inBackend}
    tagName = ${this.inBackend ? 'div' : 'a'}

    btnColor = ${node.properties.bgColor ? 'btn-' + node.properties.bgColor : 'btn-primary'}
    btnOutline = ${node.properties.outline ? 'btn-' + (node.properties.bgColor ? 'outline-' + node.properties.bgColor : 'outline-primary') : false}
    btnBlock = ${node.properties.block ? 'w-100' : false}
    btnSize = ${node.properties.size ? 'btn-' + node.properties.size : false}
    btnAlignment = ${node.properties.alignment == 'left' ? 'text-start' : node.properties.alignment == 'right' ? 'text-end' : node.properties.alignment == 'center' ? 'text-center' : 'text-left'}

    class = ${'btn' + (this.btnColor ? ' ' + (this.btnOutline ? ' ' + this.btnOutline : this.btnColor) : false) + (this.btnBlock ? ' ' + this.btnBlock : false) + (this.btnSize ? ' ' + this.btnSize : false)}

    link = ${node.properties.link}
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
    }
    linkTarget = ${node.properties.linktarget ? '_blank' : false}

    faicon = ${node.properties.faicon}
    faiconSize = ${node.properties.faiconSize}
    onlyIcon = ${node.properties.onlyicon}

    iconAlignment = ${node.properties.iconAlignment}
    iconAlignmentLeft = ${this.iconAlignment == 'left' ? true : false}
    iconAlignmentRight = ${this.iconAlignment == 'right' ? true : false}

    renderer = afx`
        <NeosRulez.Bootstrap:Component.AbstractContent>
            <div class={props.btnAlignment} >
                <Neos.Fusion:Tag tagName={props.tagName} attributes.href={props.link} attributes.target={props.linkTarget} attributes.class={props.class} >
                    <div class="d-inline-flex align-items-center">
                        <NeosRulez.Bootstrap:Component.Button.FontAwesomeIcon @if.render={props.faicon && props.iconAlignmentLeft} faIcon={props.faicon} size={props.faiconSize} onlyIcon={props.onlyIcon} iconAlignment={props.iconAlignment} />
                        <Neos.Neos:Editable @if.render={!props.onlyIcon} property="title" block={false} />
                        <NeosRulez.Bootstrap:Component.Button.FontAwesomeIcon @if.render={props.faicon && props.iconAlignmentRight} faIcon={props.faicon} size={props.faiconSize} onlyIcon={props.onlyIcon} iconAlignment={props.iconAlignment} />
                    </div>
                </Neos.Fusion:Tag>
            </div>
        </NeosRulez.Bootstrap:Component.AbstractContent>
    `
}

prototype(NeosRulez.Bootstrap:Component.Button.FontAwesomeIcon) < prototype(Neos.Fusion:Component) {
    icon = ${this.faIcon ? (this.size ? this.faIcon + ' ' + this.size : this.faIcon) : false}
    marginClass = ${this.iconAlignment == 'left' ? ' me-2' : ' ms-2'}

    renderer = afx`
        <i @if.render={props.icon} class={props.icon + (props.onlyicon ? '' : (props.onlyIcon ? false : props.marginClass))} ></i>
    `
}