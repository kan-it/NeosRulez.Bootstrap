prototype(NeosRulez.Bootstrap:Content.AbstractContent) < prototype(Neos.Fusion:Component) {
    containerWidth = ${((q(node).parentsUntil('[instanceof Neos.Neos:Document]').count() == 1) ? q(node).property('containerwidth') + ' ' : '') + (q(node).property('class') ? ' ' + q(node).property('class') + ' ' : '')}
    classes1 = ${container + (q(node).property('mt') ? ' ' + q(node).property('mt') : '' ) + (q(node).property('mb') ? ' ' + q(node).property('mb') : '' ) + (q(node).property('ml') ? ' ' + q(node).property('ml') : '' ) + (q(node).property('mr') ? ' ' + q(node).property('mr') : '' ) + (q(node).property('pt') ? ' ' + q(node).property('pt') : '' ) + (q(node).property('pb') ? ' ' + q(node).property('pb') : '' ) + (q(node).property('pl') ? ' ' + q(node).property('pl') : '' ) + (q(node).property('pr') ? ' ' + q(node).property('pr') : '' ) + (q(node).property('animation') ? ' ' + 'os-animation' : '' ) + (q(node).property('parallax') && !node.context.inBackend ? ' ' + ' parallax' : '' ) + (q(node).property('parallax') && node.context.inBackend ? ' ' + ' bparallax' : '' ) + (q(node).property('textBsColor') ? ' ' + q(node).property('textBsColor') : '' ) + (q(node).property('backgroundBsColor') ? ' ' + q(node).property('backgroundBsColor') : '' ) + (q(node).property('masterclass') ? ' ' + q(node).property('masterclass') : '' ) + ' neosrulez-content'}
    data-os-animation = ${(q(node).property('animation') ? q(node).property('animation') : 'none' )}
    data-os-animation-delay = ${(q(node).property('animation') ? q(node).property('delay') + 's' : '0s' )}
    tooltiptext = ${q(node).property('tooltiptext')}
    tooltipposition = ${q(node).property('tooltiptext') ? q(node).property('tooltipposition') : ''}
    tooltip = ${q(node).property('tooltiptext') ? 'tooltip' : ''}
    classes = ${this.containerWidth + this.classes1}
    renderInFrontend = ${site.context.inBackend ? false : true}

    renderer = afx`
        <div @if.render={props.renderInFrontend} class={props.classes} data-os-animation={props.data-os-animation} data-os-animation-delay={props.data-os-animation-delay} title={props.tooltiptext} data-placement={props.tooltipposition} data-toggle={props.tooltip}>
             {props.content}
        </div>
        <div @if.render={!props.renderInFrontend} class={props.classes} data-os-animation={props.data-os-animation} data-os-animation-delay={props.data-os-animation-delay}>
            {props.content}
        </div>
    `
}
