prototype(NeosRulez.Bootstrap:IconComponent) < prototype(Neos.Fusion:Component) {

	renderer = afx`
		<NeosRulez.Bootstrap:IconWrapper size={props.size} hasBorder={props.hasBorder} alignment={props.alignment} class={props.class}>
			<NeosRulez.Bootstrap:IconLayer icon={props.icon} isInversed={false} />
		</NeosRulez.Bootstrap:IconWrapper>
	`
}

prototype(NeosRulez.Bootstrap:StackedIconComponent) < prototype(Neos.Fusion:Component) {

	renderer = afx`
		<NeosRulez.Bootstrap:IconWrapper size={props.size} hasBorder={props.hasBorder} alignment={props.alignment} class={props.class} isStack="true">
			<NeosRulez.Bootstrap:IconLayer icon={props.backgroundIcon} size="stack-2x" />
			<NeosRulez.Bootstrap:IconLayer icon={props.icon} size="stack-1x" isInversed={props.iconInversed} />
		</NeosRulez.Bootstrap:IconWrapper>
	`
}

prototype(NeosRulez.Bootstrap:IconWrapper) < prototype(Neos.Fusion:Component) {

	@context {
		size = ${this.size}
		alignment = ${this.alignment}
		isStack = ${this.isStack}
		hasBorder = ${this.hasBorder}
	}

	class = Neos.Fusion:RawArray

	class.@process.addStack = ${Array.push(value, isStack ? 'fa-stack' : '')}
	class.@process.addBorder = ${Array.push(value, hasBorder ? 'fa-border' : '')}
	class.@process.addSize = ${Array.push(value, size ? 'fa-' + size : '')}
	class.@process.addAlignment = ${Array.push(value, alignment ? 'd-block text-' + alignment : '')}

	style = Neos.Fusion:RawArray {
		fixLineHight = Neos.Fusion:Value {
			value = 'line-height: 2em'
			@if.isStack = ${isStack}
			@if.isInBackend = ${documentNode.context.inBackend}
		}
	}


	renderer = afx`
		<span class={props.class} style={props.style}>{props.content}</span>
	`
}

prototype(NeosRulez.Bootstrap:IconLayer) < prototype(Neos.Fusion:Component) {

	icon = ${''}
	size = ${''}
	alignment = ${''}
	isInversed = ${false}

	@context {
		icon = ${this.icon}
		size = ${this.size}
		alignment = ${this.alignment}
		isInversed = ${this.isInversed}
	}

	class = Neos.Fusion:RawArray {
		icon = ${icon}
		size = ${size ? 'fa-' + size : ''}
		alignment = ${alignment ? 'd-block text-' + alignment : ''}
		inverse = ${isInversed ? 'fa-inverse' : ''}
	}

	renderer = afx`
		<i class={props.class}>{props.content}</i>
	`
}
